import tkinter as tk
from tkinter import ttk, messagebox
from fpdf import FPDF
import os

# Main Application Class
class BillingSoftware:
    def __init__(self, root):
        self.root = root
        self.root.title("Billing Software")
        self.root.geometry("1024x768")

        # Data Containers
        self.products = {
            "001": {"name": "Product A", "price": 100.0, "stock": 50},
            "002": {"name": "Product B", "price": 150.0, "stock": 30},
        }
        self.cart = {}
        self.customer_details = {}

        # UI Setup
        self.setup_ui()

    def setup_ui(self):
        # Title Label
        title = tk.Label(self.root, text="Billing Software", font=("Arial", 24, "bold"))
        title.pack(side=tk.TOP, fill=tk.X)

        # Customer Frame
        customer_frame = tk.LabelFrame(self.root, text="Customer Details", font=("Arial", 12))
        customer_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        tk.Label(customer_frame, text="Name:").grid(row=0, column=0, padx=5, pady=5)
        self.customer_name = tk.Entry(customer_frame)
        self.customer_name.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(customer_frame, text="Phone:").grid(row=0, column=2, padx=5, pady=5)
        self.customer_phone = tk.Entry(customer_frame)
        self.customer_phone.grid(row=0, column=3, padx=5, pady=5)

        # Product Frame
        product_frame = tk.LabelFrame(self.root, text="Products", font=("Arial", 12))
        product_frame.pack(side=tk.LEFT, fill=tk.BOTH, padx=10, pady=5, expand=True)

        self.product_list = ttk.Treeview(product_frame, columns=("id", "name", "price", "stock"), show="headings")
        self.product_list.heading("id", text="ID")
        self.product_list.heading("name", text="Name")
        self.product_list.heading("price", text="Price")
        self.product_list.heading("stock", text="Stock")
        self.product_list.pack(fill=tk.BOTH, expand=True)

        self.load_products()

        # Cart Frame
        cart_frame = tk.LabelFrame(self.root, text="Cart", font=("Arial", 12))
        cart_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=10, pady=5, expand=True)

        self.cart_list = ttk.Treeview(cart_frame, columns=("name", "quantity", "price"), show="headings")
        self.cart_list.heading("name", text="Product")
        self.cart_list.heading("quantity", text="Quantity")
        self.cart_list.heading("price", text="Price")
        self.cart_list.pack(fill=tk.BOTH, expand=True)

        add_to_cart_btn = tk.Button(cart_frame, text="Add to Cart", command=self.add_to_cart)
        add_to_cart_btn.pack(side=tk.TOP, pady=5)

        # Checkout Frame
        checkout_frame = tk.LabelFrame(self.root, text="Checkout", font=("Arial", 12))
        checkout_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=5)

        self.total_label = tk.Label(checkout_frame, text="Total: $0.00", font=("Arial", 16))
        self.total_label.pack(side=tk.LEFT, padx=10)

        checkout_btn = tk.Button(checkout_frame, text="Checkout", command=self.checkout)
        checkout_btn.pack(side=tk.RIGHT, padx=10)

    def load_products(self):
        for id, details in self.products.items():
            self.product_list.insert("", "end", values=(id, details["name"], details["price"], details["stock"]))

    def add_to_cart(self):
        selected_item = self.product_list.focus()
        if not selected_item:
            messagebox.showerror("Error", "Please select a product to add to cart.")
            return

        item_data = self.product_list.item(selected_item)["values"]
        product_id, product_name, price, stock = item_data

        if product_id not in self.cart:
            self.cart[product_id] = {"name": product_name, "quantity": 1, "price": price}
        else:
            self.cart[product_id]["quantity"] += 1

        self.update_cart()

    def update_cart(self):
        self.cart_list.delete(*self.cart_list.get_children())
        total = 0
        for product in self.cart.values():
            total += product["quantity"] * product["price"]
            self.cart_list.insert("", "end", values=(product["name"], product["quantity"], product["price"]))

        self.total_label.config(text=f"Total: ${total:.2f}")

    def checkout(self):
        if not self.customer_name.get() or not self.customer_phone.get():
            messagebox.showerror("Error", "Please enter customer details.")
            return

        # Generate Invoice
        self.customer_details = {
            "name": self.customer_name.get(),
            "phone": self.customer_phone.get(),
        }

        invoice_path = self.generate_invoice()
        messagebox.showinfo("Checkout", f"Invoice saved to {invoice_path}")

        # Reset Cart and UI
        self.cart.clear()
        self.update_cart()
        self.customer_name.delete(0, tk.END)
        self.customer_phone.delete(0, tk.END)

    def generate_invoice(self):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        pdf.cell(200, 10, txt="Invoice", ln=True, align='C')
        pdf.cell(200, 10, txt=f"Customer: {self.customer_details['name']}", ln=True)
        pdf.cell(200, 10, txt=f"Phone: {self.customer_details['phone']}", ln=True)
        pdf.ln(10)

        pdf.cell(80, 10, txt="Product", border=1)
        pdf.cell(30, 10, txt="Quantity", border=1)
        pdf.cell(40, 10, txt="Price", border=1, ln=True)

        total = 0
        for product in self.cart.values():
            pdf.cell(80, 10, txt=product["name"], border=1)
            pdf.cell(30, 10, txt=str(product["quantity"]), border=1)
            pdf.cell(40, 10, txt=f"${product['price']:.2f}", border=1, ln=True)
            total += product["quantity"] * product["price"]

        pdf.ln(10)
        pdf.cell(200, 10, txt=f"Total: ${total:.2f}", ln=True, align='R')

        output_path = os.path.join(os.getcwd(), "invoice.pdf")
        pdf.output(output_path)
        return output_path


if __name__ == "__main__":
    root = tk.Tk()
    app = BillingSoftware(root)
    root.mainloop()
